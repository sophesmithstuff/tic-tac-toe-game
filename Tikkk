<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic-Tac-Toe Game</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="game-container">
    <h1>Tic-Tac-Toe</h1>
    <div class="board" id="board">
      <div class="cell" data-index="0"></div>
      <div class="cell" data-index="1"></div>
      <div class="cell" data-index="2"></div>
      <div class="cell" data-index="3"></div>
      <div class="cell" data-index="4"></div>
      <div class="cell" data-index="5"></div>
      <div class="cel
/* Basic reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background-color: #f0f0f0;
}

.game-container {
  text-align: center;
}

h1 {
  margin-bottom: 20px;
}

.board {
  display: grid;
  grid-template-columns: repeat(3, 100px);
  grid-template-rows: repeat(3, 100px);
  gap: 10px;
  margin-top: 20px;
}

.cell {
  width: 100px;
  height: 100px;
  background-color: white;
  border: 2px solid #333;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2em;
  cursor: pointer;
  transition: background-color 0.3s;
}

.cell:hover {
  background-color: #f0f0f0;
}

.cell.taken {
  pointer-events: none;
}

#status {
  margin-top: 20px;
  font-size: 1.2em;
  color: #333;
}
const board = document.getElementById('board');
const statusElement = document.getElementById('status');
let currentPlayer = 'X';
let boardState = ['', '', '', '', '', '', '', '', '']; // Empty board

const winningCombinations = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6]
];

// Create the Tic-Tac-Toe board
board.addEventListener('click', handleCellClick);

function handleCellClick(event) {
  const index = event.target.dataset.index;
  
  // Ignore if cell is already taken or if the game is over
  if (boardState[index] !== '' || statusElement.textContent !== '') return;

  // Mark the cell with current player's symbol
  boardState[index] = currentPlayer;
  event.target.textContent = currentPlayer;
  event.target.classList.add('taken');
  
  // Check for a winner
  if (checkWinner()) {
    statusElement.textContent = `${currentPlayer} Wins! Redirecting...`;
    setTimeout(() => redirectToNewPage(), 2000);
    return;
  }

  // Check for a draw
  if (boardState.every(cell => cell !== '')) {
    statusElement.textContent = 'It\'s a Draw! Redirecting...';
    setTimeout(() => redirectToNewPage(), 2000);
    return;
  }

  // Switch player
  currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
  statusElement.textContent = `${currentPlayer}'s turn`;
}

function checkWinner() {
  return winningCombinations.some(combination => {
    const [a, b, c] = combination;
    return boardState[a] === currentPlayer && boardState[b] === currentPlayer && boardState[c] === currentPlayer;
  });
}

function redirectToNewPage() {
  window.location.href = "newpage.html"; // Change this to your desired URL
}
